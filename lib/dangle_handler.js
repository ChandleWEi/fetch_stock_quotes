// Generated by CoffeeScript 1.3.3
(function() {
  var dcn_download, dcn_mad, dcn_score, env, fs, http, logger, mysql, request, verify_proxies;

  http = require('http');

  http.globalAgent.maxSockets = 10;

  request = require('request');

  logger = require('./logger');

  mysql = require('./db').mysql;

  env = require('./config/environment');

  fs = require('fs');

  verify_proxies = function(response, query) {
    var get_total_count_sql;
    get_total_count_sql = "select count(*) as count from http_proxies";
    mysql.query(get_total_count_sql, null, function(err, results) {
      var completed_count, get_proxy_sql, proxy_count_per_request, step, total_count, _ref, _results;
      if (err) {
        console.error("[mysql error] Count http_proxies failed for " + err);
        return response.end();
      } else {
        total_count = results[0].count;
        console.log("[mysql http_proxies_total_count] " + total_count);
        _ref = [0, 0, 1], step = _ref[0], completed_count = _ref[1], proxy_count_per_request = _ref[2];
        if (total_count > 0) {
          _results = [];
          while (true) {
            get_proxy_sql = "select id, ip, country, port from http_proxies limit " + proxy_count_per_request + " offset " + (step * proxy_count_per_request);
            mysql.query(get_proxy_sql, null, function(error, rs) {
              var available, cookie, country, id, ip, j, port, update_proxy_sql, url;
              if (error) {
                return console.log("[mysql error] Get http proxy to verify failed for " + error);
              } else {
                if (typeof rs[0] === "undefined") {
                  console.error("[mysql error] http proxies table is blank");
                  console.log(" direct return ... ");
                  return;
                }
                update_proxy_sql = "update http_proxies set available = ?, verified_at = now() where id = ?";
                id = rs[0].id;
                ip = rs[0].ip;
                country = rs[0].country;
                port = rs[0].port;
                console.log("ip: " + ip + ":" + port + ", country: " + country);
                available = false;
                url = "http://www.baidu.com";
                j = request.jar();
                cookie = request.cookie("" + (Math.random()) + "myr@nd0mYUEWR" + (Math.random()));
                j.add(cookie);
                return request.get({
                  uri: url,
                  proxy: "http://" + ip + ":" + port,
                  timeout: 30000000,
                  headers: {
                    "User-Agent": "Safari 10.2"
                  },
                  jar: j
                }, function(error, res, body) {
                  var feasible, match, reg_pat;
                  feasible = false;
                  if (error || typeof res === "undefined") {
                    if (error) {
                      console.error("[proxy request error] " + error);
                    }
                    if (typeof res === "undefined") {
                      console.error("response undefined ...");
                    }
                    return mysql.query(update_proxy_sql, [feasible, id], function(err, results) {
                      if (err) {
                        return console.log("[mysql error] update http_proxies#" + id + " available failed for " + err);
                      }
                    });
                  } else {
                    console.log("[proxy statuscode] " + (typeof res.statusCode) + " " + res.statusCode);
                    if (res.statusCode === 200) {
                      reg_pat = /zhidao\.baidu\.com/m;
                      match = reg_pat.exec(body);
                      if (match === null) {
                        feasible = true;
                      } else {
                        feasible = false;
                      }
                      return mysql.query(update_proxy_sql, [feasible, id], function(err, results) {});
                    }
                  }
                });
              }
            });
            step++;
            if (step * proxy_count_per_request >= total_count) {
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      }
    });
    return response.end();
  };

  dcn_download = function(response, query) {
    var get_proxy_sql;
    response.writeHeader(200, {
      "Content-Type": "text/html"
    });
    get_proxy_sql = "select id, ip, port from http_proxies where available = true order by id desc limit 1";
    return mysql.query(get_proxy_sql, null, function(error, rs) {
      var id, ip, options, port;
      console.log(" ===================================== ");
      if (error) {
        return console.log("[mysql error] Get http proxy to verify failed for " + error);
      } else {
        if (typeof rs[0] === "undefined") {
          response.write("no available proxy");
          return response.end();
        }
        id = rs[0].id;
        ip = rs[0].ip;
        port = rs[0].port;
        options = {
          host: "ng.d.cn",
          port: 80,
          path: "/game/downs_654_1074_67221.html",
          headers: {
            "User-Agent": "Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1",
            "REMOTE_ADDR": "" + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1)),
            "X-Forwarded-For": "" + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1))
          }
        };
        return http.get(options, function(res) {
          console.log("status code: " + res.statusCode);
          return res.on('end', function(chunk) {
            console.log('response going to end');
            return response.end();
          });
        }).on('error', function(e) {
          cosole.log("error: " + e);
          return response.end();
        });
      }
    });
  };

  dcn_mad = function(response, query) {
    var ary, i, _i, _j, _len, _results;
    ary = (function() {
      _results = [];
      for (_i = 1; _i <= 10000; _i++){ _results.push(_i); }
      return _results;
    }).apply(this);
    for (_j = 0, _len = ary.length; _j < _len; _j++) {
      i = ary[_j];
      request.get('http://localhost:8888/dcn_download', function(err, res, body) {});
    }
    return response.end();
  };

  dcn_score = function(response, query) {
    var ary, i, options, _i, _j, _len, _results;
    ary = (function() {
      _results = [];
      for (_i = 1; _i <= 2000; _i++){ _results.push(_i); }
      return _results;
    }).apply(this);
    for (_j = 0, _len = ary.length; _j < _len; _j++) {
      i = ary[_j];
      options = {
        host: "ng.d.cn",
        port: 80,
        path: "/channel-asyc/?act=mark&id=654&score=10",
        headers: {
          "User-Agent": "Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1",
          "REMOTE_ADDR": "" + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1)),
          "X-Forwarded-For": "" + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1)) + "." + (Math.floor(Math.random() * 252 + 1))
        }
      };
      http.get(options, function(res) {
        console.log("status code: " + res.statusCode);
        return res.on('end', function(chunk) {
          return console.log('response going to end');
        });
      }).on('error', function(e) {
        return cosole.log("error: " + e);
      });
    }
    return response.end();
  };

  exports.verify_proxies = verify_proxies;

  exports.dcn_download = dcn_download;

  exports.dcn_mad = dcn_mad;

  exports.dcn_score = dcn_score;

}).call(this);
