// Generated by CoffeeScript 1.3.3
(function() {
  var Pool, env, logger, mysql, pool, wrapQueryCallback, _mysql;

  Pool = require('generic-pool').Pool;

  mysql = require('mysql');

  env = require('./config/environment');

  logger = require('./logger');

  pool = Pool({
    name: 'mysql',
    create: function(callback) {
      var c;
      c = mysql.createConnection({
        host: env.MYSQL_HOST,
        port: env.MYSQL_PORT,
        user: env.MYSQL_USERNAME,
        password: env.MYSQL_PASSWORD,
        database: env.MYSQL_DATABASE
      });
      c.connect(function(error) {
        if (!error) {
          logger.info("[db:mysql:connectToMySQL] MySQL client is ready.");
        }
        return callback(null, c);
      });
      return c.on('error', function(error) {
        if (!error.fatal) {
          return logger.error("[db.connectToMySQL] Error: " + error);
        }
        logger.error("[db.connectToMySQL] Fatal: " + error + ". Destroy this MySQL client...");
        return pool.destroy(c);
      });
    },
    destroy: function(client) {
      client.removeAllListeners();
      return client.end();
    },
    max: 5,
    idleTimeoutMillis: 5 * 60 * 1000,
    reapIntervalMillis: 5 * 1000,
    log: false
  });

  _mysql = {
    query: function(sql, values, callback) {
      var now, options;
      now = Date.now();
      options = {};
      if (typeof sql === "object") {
        options = sql;
        callback = values;
        values = options.values;
        delete options.values;
      } else if (typeof values === "function") {
        callback = values;
        options.sql = sql;
        values = void 0;
      } else {
        options.sql = sql;
        options.values = values;
      }
      return pool.acquire(function(error, client) {
        var query;
        if (error) {
          logger.error("[db.pool.acquire] Failed to acquire MySQL client. " + error);
          if (callback) {
            callback(error);
          }
          return;
        }
        query = client.query(options, wrapQueryCallback(callback, client));
        return query._timestamp = now;
      });
    }
  };

  wrapQueryCallback = function(callback, client) {
    return function() {
      if (this._timestamp != null) {
        logger.info("" + this.sql + " (spent: " + (Date.now() - this._timestamp) + "ms)");
      }
      pool.release(client);
      try {
        if (callback) {
          return callback.apply(null, arguments);
        }
      } catch (error) {
        return logger.error("[db:wrapQueryCallback] Error: " + error.stack);
      }
    };
  };

  exports.mysql = _mysql;

}).call(this);
