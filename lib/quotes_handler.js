// Generated by CoffeeScript 1.3.3
(function() {
  var Memcached, env, fetch_all_quotes, fetch_single_quote, http, logger, memcached, mysql, options, request, sprintf, start;

  http = require('http');

  http.globalAgent.maxSockets = 50;

  request = require('request');

  sprintf = require('sprintf').sprintf;

  logger = require('./logger');

  mysql = require('./db').mysql;

  env = require('./config/environment');

  Memcached = require('memcached');

  Memcached.config.poolSize = 25;

  memcached = new Memcached("" + env.MEMCACHED_HOST + ":" + env.MEMCACHED_PORT);

  options = require('./yahoo_finance_properties').query_options;

  start = function(response, query) {
    console.log("Request handler start was called");
    response.writeHead(200, {
      "Content-Type": "text/plain"
    });
    response.write('welcome to index.');
    return response.end();
  };

  fetch_single_quote = function(response, query) {
    var fields, i, sql, value_holders;
    query = query.split('=')[1];
    console.log("Request handler quotes was called, will get quotes for " + query);
    fields = ['symbol', 'name', 'market_capitalization', 'last_trade_price_only', 'change_with_percent_change', 'previous_close', 'day_range', 'fifty_two_week_range', 'average_daily_volume', 'short_ratio', 'p_e_ratio', 'price_eps_estimate_current_year', 'price_eps_estimate_next_year', 'peg_ratio', 'one_yr_target_price', 'dividend_per_share', 'book_value', 'created_at', 'updated_at'];
    value_holders = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = fields.length - 2; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push("?");
      }
      return _results;
    })();
    sql = "insert into stock_quotes(" + (fields.join(',')) + ") values (" + (value_holders.join(',')) + ", now(), now())";
    return request.get(sprintf(options.uri, query), function(error, res, body) {
      if (body !== void 0) {
        body.replace(/"/g, '').split('\n').forEach(function(line) {
          var values;
          line = line.trim();
          if (line === '') {
            return;
          }
          response.write(line);
          response.write("\n");
          values = line.split(',');
          logger.info("going to query database");
          return mysql.query(sql, values, function(err, results) {
            if (err) {
              console.log(err);
              response.write("\n");
              response.write("insert into mysql failed for: " + err);
            } else {
              console.log("memkey: " + env.MEMCACHED_NAMESPACE + ":" + values[0] + "  " + values[3]);
              memcached.set("" + env.MEMCACHED_NAMESPACE + ":" + values[0], values[3], env.STOCK_PRICE_EXPIRES, function(error, result) {
                if (error) {
                  return console.log("[cache:error:write] set price failed " + values[0] + "-" + values[3] + " caused by " + error);
                }
              });
            }
            console.log(results);
            return response.write("\n");
          });
        });
      }
      return response.end();
    });
  };

  fetch_all_quotes = function(response, query) {
    var get_total_count_sql, total_count;
    get_total_count_sql = "select count(*) as count from stocks";
    total_count = 0;
    return mysql.query(get_total_count_sql, null, function(err, results) {
      var fetch_quotes_per_request, get_tickers_sql, step, stock_tickers, _ref;
      if (err) {
        consloe.log("[mysql error] Count stocks failed for " + err);
        return response.end();
      } else {
        total_count = results[0].count;
        console.log("[mysql quotes_total_count] " + total_count + " " + (typeof total_count));
        _ref = [0, 50], step = _ref[0], fetch_quotes_per_request = _ref[1];
        while (true) {
          stock_tickers = [];
          get_tickers_sql = "select ticker from stocks order by id limit " + fetch_quotes_per_request + " offset " + (step * fetch_quotes_per_request);
          mysql.query(get_tickers_sql, null, function(err, results) {
            var result, _i, _len;
            if (err) {
              return console.log("[mysql error] Query stock quotes failed for " + err);
            } else {
              for (_i = 0, _len = results.length; _i < _len; _i++) {
                result = results[_i];
                stock_tickers.push(result.ticker);
              }
              return http.get("http://localhost:8888/fetch_single_quote?stock=" + (stock_tickers.join(',')), function(res) {}).on('error', function(e) {
                return console.log("[server error] batch fetch quotes failed caused by " + e);
              });
            }
          });
          step++;
          if (step * fetch_quotes_per_request >= total_count) {
            break;
          }
        }
        return response.end();
      }
    });
  };

  exports.start = start;

  exports.fetch_all_quotes = fetch_all_quotes;

  exports.fetch_single_quote = fetch_single_quote;

}).call(this);
