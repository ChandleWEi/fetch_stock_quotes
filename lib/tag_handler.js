// Generated by CoffeeScript 1.3.3
(function() {
  var date_utils, env, fetch_tags_web_score, http, jsdom, logger, mysql, options, request, single_tag_rank, sprintf, update_all_tags_weibo_score;

  http = require('http');

  http.globalAgent.maxSockets = 50;

  request = require('request');

  sprintf = require('sprintf').sprintf;

  logger = require('./logger');

  mysql = require('./db').mysql;

  options = require('./weibo_request_properties').query_options;

  jsdom = require('jsdom');

  date_utils = require('date-utils');

  env = require('./config/environment');

  jsdom.defaultDocumentFeatures = {
    FetchExternalResources: false,
    ProcessExternalResources: false
  };

  fetch_tags_web_score = function(response, query) {
    var get_total_count_sql, total_count;
    get_total_count_sql = "select count(*) as count from tags";
    total_count = 0;
    mysql.query(get_total_count_sql, null, function(err, results) {
      var completed_count, get_tag_sql, step, tag_count_per_request, _ref, _results;
      if (err) {
        consloe.log("[mysql error] Count tags failed for " + err);
        return response.end();
      } else {
        total_count = results[0].count;
        console.log("[mysql tags_total_count] " + total_count + " " + (typeof total_count));
        _ref = [0, 0, 1], step = _ref[0], completed_count = _ref[1], tag_count_per_request = _ref[2];
        _results = [];
        while (true) {
          get_tag_sql = "select title from tags order by id limit " + tag_count_per_request + " offset " + (step * tag_count_per_request);
          mysql.query(get_tag_sql, null, function(err, results) {
            if (err) {
              return console.log("[mysql error] Query tag failed for " + err);
            } else {
              return http.get("http://localhost:8888/single_tag_rank?tag=" + results[0].title, function(res) {
                completed_count++;
                logger.info("[completed_count]: " + completed_count);
                if (completed_count >= total_count) {
                  return update_all_tags_weibo_score();
                }
              }).on('error', function(e) {
                console.log("[server error] batch fetch sinle tag rank failed caused by " + e);
                completed_count++;
                if (completed_count >= total_count) {
                  return update_all_tags_weibo_score();
                }
              });
            }
          });
          step++;
          if (step * tag_count_per_request >= total_count) {
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });
    console.log("Request handler start was called");
    response.writeHead(200, {
      "Content-Type": "text/plain"
    });
    response.write('Going to fetch tag score one by one.');
    return response.end();
  };

  update_all_tags_weibo_score = function() {
    var hot_tags_count, update_tags_score_sql;
    console.log("[tags:weibo:ranks] all tags' weibo rank updated");
    hot_tags_count = env.WEIBO_HOT_TAGS_COUNT;
    update_tags_score_sql = "update tags as a inner join                                (select l.id, @curRow := @curRow -1  as row_number from tags l join (select @curRow := " + (hot_tags_count + 1) + ") r order by l.weibo_rank desc limit " + hot_tags_count + ") as b                               on a.id = b.id set a.weibo_score = b.row_number";
    return mysql.query(update_tags_score_sql, null, function(err, results) {
      if (err) {
        return console.log("[mysql error] update tags weibo score failed for " + err);
      } else {
        return console.log("tags weibo score updated");
      }
    });
  };

  single_tag_rank = function(response, query) {
    var date, dest_url, prefix, tag, today, update_sql, yesterday;
    tag = query.split('=')[1];
    date = new Date();
    today = date.toFormat("YYYY-MM-DD");
    yesterday = Date.yesterday().toFormat("YYYY-MM-DD");
    dest_url = sprintf(options.realtime_uri, tag, prefix = (date.getHours() < 10 ? yesterday : today), today);
    update_sql = "update tags set weibo_rank=?, updated_at=now() where title=?";
    request.get(dest_url, function(error, res, body) {
      if (error) {
        return logger.error("[tag:fame:error] can't open " + dest_url);
      } else {
        return jsdom.env({
          html: body
        }, function(error, window) {
          var match, reg_pat, score;
          if (error) {
            logger.error("[tag:fame:error] can't get " + tag + " total count");
          } else {
            reg_pat = /totalNum.*\s+((\d{1,},?)+\s)/m;
            match = reg_pat.exec(body);
            if (match !== null) {
              score = match[1].replace(/,/, '');
              logger.info(score);
              mysql.query(update_sql, [score, decodeURI(tag)], function(err, results) {
                if (err) {
                  return consloe.log("[mysql error] update weibo rank failed for " + err);
                }
              });
            }
          }
          return window.close();
        });
      }
    });
    return response.end();
  };

  exports.single_tag_rank = single_tag_rank;

  exports.fetch_tags_web_score = fetch_tags_web_score;

}).call(this);
